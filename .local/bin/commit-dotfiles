#!/bin/bash

REPO_PATH=$HOME
ADD_COMMON=0

for arg in "$@"; do
  case "$arg" in
    --common)
      ADD_COMMON=1
      ;;
    *)
      COMMIT_MESSAGE="$arg"
  esac
done

if [[ -z $COMMIT_MESSAGE ]]; then
    echo "Must specify a commit message"
    exit 1
fi

if [[ ADD_COMMON -eq 1 ]]; then
    BRANCH_NAME="main"
else
    BRANCH_NAME=$(hostname)
fi

TEMP_DIR=$(mktemp -d)

# Step 1: Clone the repository to a temporary location
git clone "$REPO_PATH" "$TEMP_DIR" || {
    echo "Failed to clone the repository."
    rm -rf $TEMP_DIR
    exit 1
}

# Step 2: Replicate any committed changes from the original repository
pushd "$REPO_PATH" || exit 1
git fetch origin
git diff --cached --name-only | while read -r file; do
    cp  "$file" "$TEMP_DIR/$file"
    git checkout HEAD -- "$file"  # Revert that file
done
popd

# Step 3: Checkout the specified branch in the cloned repository
pushd "$TEMP_DIR" || exit 1
git checkout -b "$BRANCH_NAME" || {
    echo "Failed to checkout branch $BRANCH_NAME."
    rm -rf $TEMP_DIR
    popd
    exit 1
}

# Step 4: Add and commit the changes in the cloned repository
git add .
git commit -m "$COMMIT_MESSAGE" || {
    echo "Failed to commit changes."
    rm -rf $TEMP_DIR
    popd
    exit 1
}

# Step 5: Push the branch to the remote repository
git push origin "$BRANCH_NAME" || {
    echo "Failed to push branch $BRANCH_NAME."
    rm -rf $TEMP_DIR
    popd
    exit 1
}

popd

# Step 6: Clean up the cloned repository
rm -rf "$TEMP_DIR"

echo "Successfully pushed changes to branch '$BRANCH_NAME' and cleaned up."